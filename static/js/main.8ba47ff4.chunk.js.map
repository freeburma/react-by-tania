{"version":3,"sources":["Table.js","Form.js","Api.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","API","data","fetch","then","result","json","entry","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"uPAEMA,G,MAAc,WAEhB,OACQ,+BACI,4BACI,oCACA,mCACA,0CAiCdC,EAAY,SAACC,GAEf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GAEvC,OACQ,wBAAIC,IAAMD,GACN,4BAAMD,EAAIG,MACV,4BAAMH,EAAII,KACV,4BACI,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAOxB,OAAO,+BAASJ,IA4CDU,EAhBD,SAACX,GACd,IAGWE,EAAmCF,EAAnCE,cAAeQ,EAAoBV,EAApBU,gBAEvB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,cAAgBA,EAAgBQ,gBAAkBA,M,OCxC1DE,E,4MAnDXC,aAAe,CACKN,KAAM,GACNC,IAAK,I,EAGzBM,MAAQ,EAAKD,a,EAEbE,aAAe,SAAAC,GACd,IAAD,EAC4BA,EAAMC,OAAtBV,EADZ,EACYA,KAAMW,EADlB,EACkBA,MAEd,EAAKC,SAAL,eACiBZ,EAAQW,K,EAU7BE,WAAa,WAET,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDAKtB,IAAD,EAC0BS,KAAKR,MAAnBP,EADZ,EACYA,KAAMC,EADlB,EACkBA,IAEd,OACI,8BACI,2BAAOe,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOjB,KAAK,OAAOkB,GAAG,OAAOP,MAAOX,EAAMmB,SAAUJ,KAAKP,eAErE,2BAAOQ,QAAQ,OAAf,OACA,2BAAOC,KAAK,OAAOjB,KAAK,MAAMkB,GAAG,MAAMP,MAAOV,EAAKkB,SAAUJ,KAAKP,eAGlE,2BAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,kB,GA5C/CO,aCkCJC,E,4MAhCXd,MAAQ,CACIe,KAAM,I,kEAKjB,IAAD,OAGIC,MAFY,kGAGPC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACc,EAAKb,SAAS,CAAEU,KAAMG,S,+BAOjD,IAGSA,EAFWV,KAAKR,MAAde,KAEY1B,KAAI,SAAC+B,EAAO7B,GAE5B,OAAO,wBAAIC,IAAKD,GAAS6B,MAG7B,OAAO,4BAAKF,O,GA7BFL,aC2GHQ,E,4MAnFXrB,MAAQ,CAoBIsB,WAAY,I,EAIxB1B,gBAAkB,SAACL,GAClB,IACW+B,EAAe,EAAKtB,MAApBsB,WAER,EAAKjB,SAAS,CACEiB,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GAEtC,OAAOA,IAAMlC,Q,EAMrCgB,aAAe,SAAAiB,GAEX,EAAKnB,SAAS,CAAEiB,WAAW,GAAD,mBAAO,EAAKtB,MAAMsB,YAAlB,CAA8BE,O,uDAI5D,IAoBYF,EAAed,KAAKR,MAApBsB,WAER,OACI,yBAAKI,UAAU,aAGb,kBAAC,EAAD,CAAOtC,cAAekC,EAAY1B,gBAAkBY,KAAKZ,kBACzD,kBAAC,EAAD,CAAMW,aAAeC,KAAKD,eAE1B,wDACA,kBAAC,EAAD,W,GA3FIM,aCFlBc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.8ba47ff4.chunk.js","sourcesContent":["import React, { Component } from 'react'; \r\n\r\nconst TableHeader = () => \r\n{\r\n    return(\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Job</th>\r\n                    <th>Remove</th>\r\n                </tr>\r\n            </thead>\r\n        ); \r\n\r\n}// end TableHeader()\r\n\r\n// const TableBody = () => \r\n// {\r\n    // // Hard coded data *** working\r\n    // return(\r\n    //         <tbody>\r\n    //             <tr>\r\n    //                 <td>Charlie</td>\r\n    //                 <td>Janitor</td>\r\n    //             </tr>\r\n    //             <tr>\r\n    //                 <td>Mac</td>\r\n    //                 <td>Bouncer</td>\r\n    //             </tr>\r\n    //             <tr>\r\n    //                 <td>Dee</td>\r\n    //                 <td>Aspiring actress</td>\r\n    //             </tr>\r\n    //             <tr>\r\n    //                 <td>Dennis</td>\r\n    //                 <td>Bartender</td>\r\n    //             </tr>   \r\n    //         </tbody>\r\n    //     );\r\n\r\n//}// end TableBody()\r\n\r\nconst TableBody = (props) => \r\n{\r\n    const rows = props.characterData.map((row, index) => \r\n    {\r\n        return(\r\n                <tr key={ index }>\r\n                    <td>{ row.name }</td>\r\n                    <td>{ row.job }</td>\r\n                    <td>\r\n                        <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n                    </td>\r\n                </tr>  \r\n        );\r\n    });\r\n\r\n\r\nreturn <tbody>{ rows }</tbody>\r\n\r\n}\r\n\r\n// class Table extends Component\r\n// {\r\n    \r\n\r\n//     render()\r\n//     {\r\n//         const { characterData, removeCharacter } = this.props; \r\n\r\n//         return (\r\n//             <table>\r\n//                 <TableHeader />\r\n//                 <TableBody characterData={ characterData } removeCharacter={ removeCharacter } />\r\n//             </table>\r\n//         ); \r\n\r\n//     }// end render()\r\n\r\n// }// end class Table\r\n\r\n// export default Table; \r\n\r\n/*\r\n    Simple component \r\n*/\r\nconst Table = (props) => \r\n{\r\n    \r\n\r\n    const { characterData, removeCharacter } = props; \r\n\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody characterData={ characterData } removeCharacter={ removeCharacter } />\r\n        </table>\r\n    ); \r\n\r\n\r\n}// end Table\r\n\r\nexport default Table; ","import React, { Component } from 'react'; \r\n\r\nclass Form extends Component\r\n{\r\n    initialState = {\r\n                        name: '', \r\n                        job: '',\r\n                   };\r\n\r\n    state = this.initialState; \r\n\r\n    handleChange = event => \r\n    {\r\n        const { name, value } = event.target; \r\n\r\n        this.setState({\r\n                        [name] : value\r\n                     }); \r\n    }// end handleChange()\r\n\r\n    /*\r\n        submitForm() that will call that function, and pass the Form state \r\n        through as the character parameter we defined earlier. It will \r\n        also reset the state to the initial state, to clear the \r\n        form after submit.\r\n    */\r\n    submitForm = () => \r\n    {\r\n        this.props.handleSubmit(this.state); \r\n        this.setState(this.initialState); \r\n\r\n    }// end submitForm()\r\n\r\n    render()\r\n    {\r\n        const { name, job } = this.state; \r\n\r\n        return(\r\n            <form>\r\n                <label htmlFor=\"name\"> Name </label>\r\n                <input type=\"text\" name=\"name\" id=\"name\" value={name} onChange={this.handleChange} />\r\n\r\n                <label htmlFor=\"job\">Job</label>\r\n                <input type=\"text\" name=\"job\" id=\"job\" value={job} onChange={this.handleChange} />\r\n\r\n                \r\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n\r\n            </form>\r\n        ); \r\n\r\n    }// end render()\r\n\r\n}// end class Form\r\n\r\nexport default Form; ","import React, { Component } from 'react';\r\n\r\nclass API extends Component\r\n{\r\n    state = {\r\n                data: [],\r\n            };\r\n\r\n    // Code is invoked after component is mounted/inserted into DOM tree\r\n    componentDidMount()\r\n    {\r\n        const url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'; \r\n\r\n        fetch(url)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                                this.setState({ data: result })\r\n                });\r\n        \r\n\r\n    }// end componentDidMount()\r\n\r\n    render()\r\n    {\r\n        const { data } = this.state; \r\n\r\n        const result = data.map((entry, index)=> \r\n        {\r\n            return <li key={index}>{ entry }</li>\r\n        }); \r\n\r\n        return <ul>{result}</ul>\r\n    }// end render()\r\n\r\n}// end class App\r\n\r\nexport default API; ","import React, { Component } from 'react';\nimport './App.css';\n\nimport Table from './Table';\nimport Form from './Form';\n\nimport API from './Api';\n\nclass App extends Component\n{\n    /*\n        ## State\n\n        Right now, we're storing our character data in an array in a variable, \n        and passing it through as props. This is good to start, but imagine \n        if we want to be able to delete an item from the array. With props, \n        we have a one way data flow, but with state we can update private \n        data from a component.\n\n        You can think of state as any data that should be saved and modified \n        without necessarily being added to a database - for example, adding \n        and removing items from a shopping cart before confirming \n        your purchase.\n\n        To start, we're going to create a state object.\n    */\n    state = {\n                // characters: [\n                //                 {\n                //                     name: 'Charlie',\n                //                     job: 'Janitor',\n                //                 },\n                //                 {\n                //                     name: 'Mac',\n                //                     job: 'Bouncer',\n                //                 },\n                //                 {\n                //                     name: 'Dee',\n                //                     job: 'Aspring actress',\n                //                 },\n                //                 {\n                //                     name: 'Dennis',\n                //                     job: 'Bartender',\n                //                 },\n                //             ], \n\n                characters: []\n            };\n\n\n    removeCharacter = (index) => \n    {\n        const { characters } = this.state; \n\n        this.setState({\n                        characters: characters.filter((character, i) => \n                        {\n                            return i !== index; \n                        }),\n                    });\n\n    }// end removeCharacter()\n\n    handleSubmit = character => \n    {\n        this.setState({ characters: [ ...this.state.characters, character ]}); \n    }// end handleSubmit()\n\n    render()\n    {\n        // const characters = [\n        //                     {\n        //                         name: 'Charlie',\n        //                         job: 'Janitor',\n        //                     },\n        //                     {\n        //                         name: 'Mac',\n        //                         job: 'Bouncer',\n        //                     },\n        //                     {\n        //                         name: 'Dee',\n        //                         job: 'Aspring actress',\n        //                     },\n        //                     {\n        //                         name: 'Dennis',\n        //                         job: 'Bartender',\n        //                     },\n        //                 ];\n\n        const { characters } = this.state;\n\n        return (\n            <div className=\"container\">\n              {/* <Table /> */}\n              {/* <Table characterData={characters} /> */}\n              <Table characterData={characters} removeCharacter={ this.removeCharacter } />\n              <Form handleSubmit={ this.handleSubmit } />\n\n              <h1>API Data from Wikipedia </h1> \n              <API />\n              \n            </div>\n        );\n    }// end render()\n\n    \n\n}// end class App\n\nexport default App; \n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}